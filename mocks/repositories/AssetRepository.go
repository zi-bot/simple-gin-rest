// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/zi-bot/simple-gin-rest/models"
)

// AssetRepository is an autogenerated mock type for the AssetRepository type
type AssetRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AssetRepository) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAsset provides a mock function with given fields: ctx
func (_m *AssetRepository) GetAllAsset(ctx context.Context) ([]*models.Asset, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Asset, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Asset); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAssetWithPagination provides a mock function with given fields: ctx, page, limit
func (_m *AssetRepository) GetAllAssetWithPagination(ctx context.Context, page int, limit int) ([]*models.Asset, int64, error) {
	ret := _m.Called(ctx, page, limit)

	var r0 []*models.Asset
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Asset, int64, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Asset); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int64); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAssetById provides a mock function with given fields: ctx, id
func (_m *AssetRepository) GetAssetById(ctx context.Context, id uint64) (*models.Asset, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.Asset, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Asset); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, asset
func (_m *AssetRepository) Save(ctx context.Context, asset *models.Asset) error {
	ret := _m.Called(ctx, asset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Asset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAssetRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssetRepository creates a new instance of AssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssetRepository(t mockConstructorTestingTNewAssetRepository) *AssetRepository {
	mock := &AssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
